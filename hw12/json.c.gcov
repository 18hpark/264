        -:    0:Source:json.c
        -:    0:Graph:json.gcno
        -:    0:Data:json.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <stdbool.h>
        -:    4:#include <ctype.h>
        -:    5:#include <string.h>
        -:    6:#include <limits.h>
        -:    7:#include "json.h"
        -:    8:
       25:    9:bool parse_int(int* a_value, char const** a_pos) {
       25:   10:	int length = strlen(*a_pos);
       25:   11:	bool is_minus = false;
       25:   12:	(*a_value) = 0;
      117:   13:	for(int i = 0; i < length; i++) {
       96:   14:		if ((*(*a_pos) >= '0' && *(*a_pos) <= '9')) {
       43:   15:			(*a_value) *= 10;
       43:   16:			(*a_value) += (*(*a_pos) - '0');
       43:   17:			(*a_pos)++;
       43:   18:			if (*(*a_pos) == '-' && (*a_value != 0)) {
        1:   19:				return true;
        -:   20:			}
        -:   21:		}
       53:   22:		else if(*(*a_pos) == '+' && (*a_value == 0)) {
        1:   23:			(*a_pos)++;
       1*:   24:			if(!(*(*a_pos) >= '0' && *(*a_pos) <= '9')) {
        1:   25:				return false; 
        -:   26:			}
        -:   27:		}
       52:   28:		else if(*(*a_pos) == '-') {
        4:   29:			(*a_pos)++;
        4:   30:			if (*(*a_pos) >= '0' && *(*a_pos) <= '9') {
        3:   31:				is_minus = true;
        -:   32:			}
        -:   33:			else {
        1:   34:				return false; 
        -:   35:			}
        -:   36:		}
       48:   37:		else if (*a_value == 0) {
        1:   38:			return false; 
        -:   39:		}
        -:   40:	}
       21:   41:	if(is_minus == true) {
        3:   42:		(*a_value) = (*a_value) * -1;
        -:   43:	}
       18:   44:	else if(length == 0) {
        1:   45:		return false;
        -:   46:	}
       20:   47:	return true;
        -:   48:}
        -:   49:
       36:   50:bool parse_element(Element* a_element, char const** a_pos) {
        -:   51:	bool is_final;
       39:   52:	for (int i = 0; isspace(**a_pos) != false; i++) {
        3:   53:		(*a_pos)++;
        -:   54:	}
       36:   55:	if (isdigit(**a_pos) || (**a_pos) == '-') {
       16:   56:		(*a_element).type = ELEMENT_INT;
       16:   57:		is_final = parse_int(&(a_element -> as_int), a_pos); 
        -:   58:	}
       20:   59:	else if (**a_pos == '\"') {
        4:   60:		(*a_element).type = ELEMENT_STRING;
        4:   61:		is_final = parse_string(&(a_element -> as_string), a_pos);
        -:   62:	}
       16:   63:	else if (**a_pos == '[') {
       14:   64:		(*a_element).type = ELEMENT_LIST;
       14:   65:		is_final = parse_list(&(a_element -> as_list), a_pos);
        -:   66:	}
        -:   67:	else {
        2:   68:		return false;
        -:   69:	}
       34:   70:	return is_final;
        -:   71:}
        -:   72:
       11:   73:bool parse_string(char** a_string, char const** a_pos) {
       11:   74:	int length = 0;
        -:   75:
        -:   76:	//length = strlen(*a_pos);
       11:   77:	if (*(*a_pos) == '\"') {
       10:   78:		(*a_pos)++;
       28:   79:		for (int i = 0; (*a_pos)[i] != '\"'; i++) {
       21:   80:			if((*a_pos)[i] == '\0' || (*a_pos)[i] == '\n') {
        6:   81:				for(int j = 0; j < i; j++) {
        3:   82:					(*a_pos)++;
        -:   83:				}
        3:   84:				return false;
        -:   85:			}
       18:   86:			length++;
        -:   87:		}
        -:   88:	}
        -:   89:	else { 
        1:   90:		return false;
        -:   91:	}
        7:   92:	*a_string = malloc((sizeof(**a_string) * (length + 1)));
        -:   93:/*	for (int i = 0; *(*a_pos) != '\0'; i++) {
        -:   94:		if (*(*a_pos) != '\"') {
        -:   95:			(*a_string)[i] = *(*a_pos);
        -:   96:		}
        -:   97:		else {
        -:   98:			(*a_pos)++;
        -:   99:			break;
        -:  100:		}
        -:  101:		(*a_pos)++;
        -:  102:	}
        -:  103:*/
       22:  104:	for(int i = 0; *(*a_pos) != '\"'; i++) {
       15:  105:		(*a_string)[i] = *(*a_pos);
       15:  106:		(*a_pos)++;
        -:  107:	}
        7:  108:	(*a_pos)++; //to remove " at the end of string
        7:  109:	(*a_string)[length] = '\0';
        7:  110:	return true;
        -:  111:}
        -:  112:
        6:  113:void print_element(Element element) {
        6:  114:	if (element.type == ELEMENT_INT) {
        4:  115:		printf("%d\n",element.as_int);
        -:  116:	}
        2:  117:	else if (element.type == ELEMENT_STRING) {
        1:  118:		printf("\"%s\"\n", element.as_string);
        -:  119:	}
        1:  120:	else if (element.type == ELEMENT_LIST) {
        1:  121:		printf("[");
        4:  122:		for (Node* current = element.as_list; current != NULL; current = current -> next) {
        3:  123:			print_element(current -> element);
        3:  124:			if (current -> next != NULL) {
        2:  125:				printf(",");
        -:  126:			}
        -:  127:		}
        1:  128:		printf("]");
        -:  129:	}
        6:  130:}
        -:  131:
       23:  132:void free_element(Element element) {
       23:  133:	if(element.type == ELEMENT_STRING) {
        4:  134:		free(element.as_string);
        -:  135:	}
       19:  136:	else if(element.type == ELEMENT_LIST) {
       20:  137:		while (element.as_list != NULL) {
       13:  138:			Node* new_head = (element.as_list) -> next;
       13:  139:			free_element((element.as_list) -> element);
       13:  140:			free(element.as_list);
       13:  141:			element.as_list = new_head;
        -:  142:		}
        7:  143:		element.as_list = NULL;
        -:  144:	}
       23:  145:}
        -:  146:
       15:  147:bool parse_list(Node** a_head, char const** a_pos) {
       15:  148:	(*a_head) = NULL;
       15:  149:	Node* a_tail = NULL;
       15:  150:	int count = 1;
        -:  151:	
        -:  152:
       15:  153:	if (*(*a_pos) == '[') {
       14:  154:		(*a_pos)++;
       60:  155:		for (int i = 0; (*a_pos)[i] != ']'; i++) {
       49:  156:			if((*a_pos)[i] == '\0') {
        2:  157:				return false;
        -:  158:			}
       47:  159:			else if ((*a_pos)[i] == ',') {
        8:  160:				i++;
        8:  161:				if ((*a_pos)[i] == ']' || (*a_pos)[i] == ',' || (*a_pos)[i] == '\0') {
        1:  162:					return false;
        -:  163:				}
        -:  164:			}
        -:  165:		}
       74:  166:		for (int j = 0; (*a_pos)[j] != '\0'; j++) {
       63:  167:				if ((*a_pos)[j] == '[') {
        4:  168:					count++;
        -:  169:				}
       59:  170:				else if ((*a_pos)[j] == ']') {
       14:  171:					count--;
        -:  172:				}
        -:  173:		}
       11:  174:		if (count != 0 || *(*a_pos) == ',') {
        3:  175:			return false;
        -:  176:		}
       21:  177:		while (*(*a_pos) != ']') {
       13:  178:			if (*(*a_pos) == ',') {
        7:  179:				(*a_pos)++;
        -:  180:			}
       13:  181:			Node* new_tail = malloc(sizeof(*new_tail));
       13:  182:			if (parse_element(&(new_tail -> element), a_pos) == true) {	
       13:  183:				if (*a_head == NULL) {
        6:  184:					*new_tail = (Node) { .element = new_tail -> element, .next = NULL };
        6:  185:					(*a_head) = new_tail;
        6:  186:					a_tail = *a_head;
        -:  187:				}	
        -:  188:				else {
        7:  189:					*new_tail = (Node) { .element = new_tail -> element, .next = NULL };
        7:  190:					a_tail -> next = new_tail;
        7:  191:					a_tail = new_tail;
        -:  192:				}
        -:  193:			}
       17:  194:			while (isspace(*(*a_pos))) {
        4:  195:				(*a_pos)++;
        -:  196:			}
        -:  197:		}
        -:  198:	}
        -:  199:	else {
        1:  200:		return false;
        -:  201:	}
        -:  202:
        8:  203:	return true;	
        -:  204:}
        -:  205:
        -:  206:
        -:  207:/* vim: set tabstop=4 shiftwidth=4 fileencoding=utf-8 noexpandtab: */
